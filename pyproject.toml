[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Poetry config
[tool.poetry]
name = "pynalyzer"
version = "1.0.0"
description = "Meta code analysis tool, bundling together multiple code analysis libraries"
authors = ["Devourian <dorian.antonkiewicz@gmail.com>"]
maintainers = ["Devourian <dorian.antonkiewicz@gmail.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/Devourian/pynalyzer"
repository = "https://github.com/Devourian/pynalyzer"
keywords = [
    "automation",
    "code_quality",
    "static_code_analysis",
    "code_analysis",
    "black",
    "mypy",
    "isort",
    "bandit",
    "cicd",
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Software Development :: Quality Assurance",
  "Typing :: Typed",
]

[tool.poetry.dependencies]
python = "^3.7"
mypy = "^1.4.1"
black = "^23.3.0"
isort = "^5.11.5"
bandit = "^1.7.5"
tomli = { version = "^2.0.1", python = "<3.11" }
# tomli is builtin from Python 3.11 onwards

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^7.4.0"
pytest-randomly = "^3.12.0"
pytest-cov = "^4.1.0"
# Performance profiling
snakeviz = "^2.2.0"
# Documentation generation
Sphinx = "^5.3.0"
# Enables colored isort output
colorama = "^0.4.6"


[tool.poetry.scripts]
check = "pynalyzer.scripts.entrypoint:Entrypoint.check"
fix = "pynalyzer.scripts.entrypoint:Entrypoint.fix"


# Static code analysis config
[tool.black]
line-length = 88
target-version = ["py37"]

[tool.isort]
profile = "black"
color_output = true
# For color_output to work, one needs to install colorama package

[tool.mypy]
disallow_untyped_defs = true
pretty = true
show_error_context = true
warn_no_return = true
warn_return_any = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unused_configs = true

[tool.bandit.assert_used]
skips = ["*_test.py", "*/test_*.py"]
# Skips check of assert keyword used in tests, as assert
# keyword shouldn't only be used in source files (because -o flag)

[tool.pynalyzer]
paths = ["pynalyzer", "tests"]


# Pytest config
[tool.pytest.ini_options]
markers = [
    "integration: integration tests (deselect with '-m \"not integration\"')",
]
